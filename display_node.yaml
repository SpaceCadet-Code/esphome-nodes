esphome:
  name: epaper-display
  platform: ESP8266
  board: d1
  on_boot:
    priority: -10
    then:
      - delay: 10s
      - component.update: epaperdisplay
      
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Espforcast Fallback Hotspot"
    password: "Password"

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

spi:
  clk_pin: 14
  mosi_pin: 13
  

dallas:
  - pin: GPIO5
    update_interval: 600s

font:
  - file: 'fonts/Google_Sans_Bold.ttf'
    id: clock_font
    size: 80
    glyphs: [0, 1, 2, 3, 4, 5, 6, 7 ,8, 9, ':']
  - file: 'fonts/Google_Sans_Medium.ttf'
    id: temp_font
    size: 32
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/']
  - file: 'fonts/Google_Sans_Bold.ttf'
    id: status_font
    size: 18
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '/']
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font
    size: 32
    glyphs: [
      "\U000F0899", # mdi-account-heart
      "\U000F050F", # mdi-thermometer
      "\U000F1137", # mdi-fire-hydrant
      "\U000F054A", # mdi-umbrella
      "\U000F0F55", # mdi-home-thermometer-outline
      "\U000F0F54", # mdi-home-thermometer
      # Wifi
      "\U000F092F", # mdi-wifi-strength-outline
      "\U000F091F", # mdi-wifi-strength-1
      "\U000F0922", # mdi-wifi-strength-2
      "\U000F0925", # mdi-wifi-strength-3
      "\U000F0928", # mdi-wifi-strength-4
      # Weather
      "\U000F0599", # mdi-weather-sunny
      "\U000F0594", # mdi-weather-night
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0597", # mdi-weather-rainy
      "\U000F0596", # mdi-weather-pouring
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0598", # mdi-weather-snowy-heavy
      "\U000F059D", # mdi-weather-windy-variant
      "\U000F0591", # mdi-weather-fog
      "\U000F0F31", # mdi-weather-night-partly-cloudy
      "\U000F0595", # mdi-weather-partly-cloudy
      # Moon
      "\U000F0F64", # new_moon
      "\U000F0F65", # waxing_crescent
      "\U000F0F61", # first_quarter
      "\U000F0F68", # waxing_gibbous
      "\U000F0F62", # full_moon
      "\U000F0F66", # waning_gibbous
      "\U000F0F63", # last_quarter
      "\U000F0F67", # waning_crescent
      # Sun
      "\U000F059A", # mdi-weather-sunset-down
      "\U000F059C", # mdi-weather-sunset-up
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font
    size: 40
    glyphs: [
      "\U000F0899", # mdi-account-heart
      "\U000F050F", # mdi-thermometer
      "\U000F1137", # mdi-fire-hydrant
      "\U000F054A", # mdi-umbrella
      "\U000F0F55", # mdi-home-thermometer-outline
      # Wifi
      "\U000F092F", # mdi-wifi-strength-outline
      "\U000F091F", # mdi-wifi-strength-1
      "\U000F0922", # mdi-wifi-strength-2
      "\U000F0925", # mdi-wifi-strength-3
      "\U000F0928", # mdi-wifi-strength-4
      # Weather
      "\U000F0599", # mdi-weather-sunny
      "\U000F0594", # mdi-weather-night
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0597", # mdi-weather-rainy
      "\U000F0596", # mdi-weather-pouring
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0598", # mdi-weather-snowy-heavy
      "\U000F059D", # mdi-weather-windy-variant
      "\U000F0591", # mdi-weather-fog
      "\U000F0F31", # mdi-weather-night-partly-cloudy
      "\U000F0595", # mdi-weather-partly-cloudy
      # Moon
      "\U000F0F64", # new_moon
      "\U000F0F65", # waxing_crecent
      "\U000F0F61", # first_quarter
      "\U000F0F68", # waxing_gibbous
      "\U000F0F62", # full_moon
      "\U000F0F66", # waning_gibbous
      "\U000F0F63", # last_quarter
      "\U000F0F67", # waning_crescent
      ]

time:
  - platform: sntp
    id: current_time
    timezone: UTC−05:00

sensor:
  - platform: homeassistant
    id: inside_temperature
    entity_id: sensor.bedroomlamp1_ds18b20_temperature
    internal: true
    
  - platform: homeassistant
    id: outside_temperature
    entity_id: sensor.openweathermap_feels_like_temperature
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.sparsnas_energy_consumption_momentary
    id: sparsnas
    internal: true

  - platform: homeassistant
    entity_id: sensor.openweathermap_forecast_precipitation_probability
    id: precip_probability
    internal: true

    
  - platform: dallas
    address: 0x700516738E4FFF28
    name: "Clock Temp"
    internal: true

  - platform: adc
    pin: VCC
    name: "VCC Voltage"
    internal: true
    
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: clock_wifisignal
    update_interval: 60s

text_sensor:
  - platform: homeassistant
    id: top_consumer
    entity_id: sensor.iotawatt_top_consumer
    internal: true

  - platform: homeassistant
    name: forecast
    id: weather_forecast
    entity_id: sensor.forecast
    internal: true

  - platform: homeassistant
    name: forecast
    id: weather_forecast_today
    entity_id: sensor.forecast_today
    internal: true

  - platform: homeassistant
    id: moon_icon
    entity_id: sensor.moon_tpl
    internal: true
    

display:
  - platform: waveshare_epaper
    id: epaperdisplay
    cs_pin: 15
    busy_pin: 16
    reset_pin: 4
    dc_pin: 12
    model: 4.20in
    update_interval: 300s
    lambda: |
      int x, y;
      ESP_LOGI("display", "Updating..");
      /* Print time in HH:MM format */
      it.strftime(125, -10, id(clock_font), TextAlign::TOP_CENTER, "%H:%M", id(current_time).now());
      
      it.line(240, -10, 240, 200);
      it.line(241, 0, 241, 200);
      it.line(242, 0, 242, 200);
      
      it.line(0, 200, 242, 200);
      it.line(0, 201, 242, 201);
      it.line(0, 202, 242, 202);
      
       /*Moon icon */
      if(id(moon_icon).has_state()) {
        y = 155, x = 225;
        ESP_LOGI("Moon icon", "%s", id(moon_icon).state.c_str());
        it.printf(x, y, id(weather_font), TextAlign::BASELINE_CENTER, "%s", id(moon_icon).state.c_str());
      }
      /* WiFi Signal Strength */
      
      if(id(clock_wifisignal).has_state()) {
        x = 398, y = 298;
        if (id(clock_wifisignal).state >= -50) {
            /*Excellent*/
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "\U000F0925");
            ESP_LOGI("WiFi", "Exellent");
        } else if (id(clock_wifisignal).state  >= -60) {
            /*Good*/
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "\U000F0925");
            ESP_LOGI("WiFi", "Good");
        } else if (id(clock_wifisignal).state  >= -67) {
            /*Fair*/
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "\U000F0922");
            ESP_LOGI("WiFi", "Fair");
        } else if (id(clock_wifisignal).state  >= -70) {
            /*Weak*/
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "\U000F091F");
            ESP_LOGI("WiFi", "Weak");
        } else {
            /*Unlikely working signal*/
            it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "\U000F092F");
            ESP_LOGI("WiFi", "Unlikely");
        }
      }
      /*Current weather*/
      if(id(weather_forecast_today).has_state()) {
        std::string str = id(weather_forecast_today).state;
        ESP_LOGI("Weather", "%s", str.c_str());
        std::size_t current, previous = 0;
        char delim = ';';
        current = str.find(delim);
        int y = 140, x = 5;
        for (int i=0; i<3; i++) {
            if(i == 0) {
              it.printf(x, y, id(weather_font),
                TextAlign::BASELINE_LEFT,
                "%s", str.substr(previous, current - previous).c_str());
            } else if (i == 1) {
              ESP_LOGD("weather","%dx%d %s", (i % 1 ? 270 : 320), x,
                str.substr(previous, current - previous).c_str());
            } else if (i == 2) { /* Chance for rain*/
              it.printf(x, y + 2, id(icon_font), TextAlign::TOP_LEFT, "\U000F054A"); // Umbrella
              it.printf(x + 30, y + 10, id(status_font),
                TextAlign::TOP_LEFT,
                "%s%%", str.substr(previous, current - previous).c_str());
            }
            
            previous = current + 1;
            current = str.find(delim, previous);
        }
      }
      /* Print inside temperature (from homeassistant sensor)*/
      y = 135, x = 102;
      if (id(inside_temperature).has_state()) {
        it.print(x, y, id(icon_font), TextAlign::BOTTOM_RIGHT, "\U000F0F55");
        it.printf(x+2, y, id(temp_font), TextAlign::BOTTOM_LEFT , "%5.1f°", id(inside_temperature).state);
      }
      // Print outside temperature (from homeassistant sensor)
      if (id(outside_temperature).has_state()) {
        it.print(x, y, id(icon_font), TextAlign::TOP_RIGHT, "\U000F0F54"); 
        it.printf(x+2, y, id(temp_font), TextAlign::TOP_LEFT, "%5.1f°", id(outside_temperature).state);
      }
      // Print consumer
      if (id(top_consumer).has_state()) {
        it.printf(0, 220, id(status_font), TextAlign::BOTTOM_LEFT , "Total: %.0f W, %s W", id(sparsnas).state, id(top_consumer).state.c_str());
      }
       it.line(0, 299, 400, 299);
     
      if(id(weather_forecast).has_state()) {
        std::string str = id(weather_forecast).state;
        ESP_LOGI("Weather", "%s", str.c_str());
        std::size_t current, previous = 0;
        char delim = ';';
        current = str.find(delim);
        int x = 340, y = 4;
        for (int i=0; i<5; i++) {
          ESP_LOGI("t", "%d", i);
          for (int j=0; j<4; j++) {
            if(j == 1) {  /* Weather icon.*/
              it.printf(x - 90, y + 25, id(weather_font),
                TextAlign::BASELINE_LEFT,
                "%s", str.substr(previous, current - previous).c_str());
            } else {
              ESP_LOGD("weather","%dx%d %s", (j % 1 ? 270 : 320), x,
                str.substr(previous, current - previous).c_str());
              it.printf((j == 0 ? x - 10 : 390), y,
                id(status_font),
                (j == 0 ? TextAlign::TOP_LEFT : TextAlign::TOP_RIGHT),
                "%s", str.substr(previous, current - previous).c_str());
              y += 16;
            }
            previous = current + 1;
            current = str.find(delim, previous);
          }
          y += 2;
        }
      }

output:
  - platform: gpio
    id: onboard_led
    pin:
      number: 2
      inverted: False

light:
  - platform: binary
    name: "Onboard LED"
    output: onboard_led
